(** [distance_espace ()] donne la distance d'un caractère au caractère espace set à 64
@param b un char
@return un int la distance*)
val distance_espace : char -> int;;

(** [distance ()] retourne la distance entre deux caractères
@param a un char b un char
@return un int la distance*)
val distance : char -> char -> int;;

(** [distanceAll] renvoie la distance entre deux char qui peuvent être aussi l'espace
@param a un char b un char
@return un int la distance*)
val distanceAll : char -> char -> int;;

(** [distance3] la distance a l'espace avec le char qui peut être l'espace
@param a un char
@return un int la distance*)
val distance3 : char -> int;;

(** [antenne] création d'un type antenne qui comprend un nom, une positon courante et la distance au prochain caractère à atteindre*)
type antenne = { num : char list; mutable pos : char; mutable dis : int; };;

(** [insert_dis ()] insert la distance dans une antenne
@param antenne une antenne distance un int
@return une antenne*)
val insert_dis : antenne -> int -> antenne;;

(**[insert_pos()] insert une position dans une antenne
@param antenne une antenne pos un char
@return une antenne*)
val insert_pos : antenne -> char -> antenne;;

(**[min ()] retourne l'antenne minimum selon la distance
@param a1 une antenne a2 une antenne
@return une antenne*)
val min : antenne -> antenne -> antenne;;

(** [min_liste()] retourne le min d'une liste d'antenne
@param liste_antenne une liste d'antenne
@return une antenne*)
val min_liste : antenne list -> antenne;;

(** [set_distance ()] ajoute la distance dans chaque antenne d'une liste par rapport à un caractère
@param liste_antenne une liste d'antenne lettre un char
@return une liste d'antenne*)
val set_distance : antenne list -> char -> antenne list;;

(** [modifier ()] modifie la pos d'une antenne si elle a le bonne identifiant 
@param num_antenne un char list lettre un char antenne une antenne
@return une antenne*)
val modifier : char list -> char -> antenne -> antenne;;

(** [modifier_liste] applique la fonction précédent à une liste d'antenne
@param liste_antenne une liste num_antenne char list lettre char
@return une liste d'antenne*)
val modifier_liste : antenne list -> char list -> char -> antenne list;;

(** [ecrire()] ecrit l'id d'une antenne sous la forme d'une char list
@param nb numéro de l'antenne
@return char list*)
val ecrire : int -> char list;;

(** [init_liste ()] creer une liste d'antenne sur la donnée de leur nombre
@param acc un accumulateur nb_antenne le nombre d'antenne
@return une liste d'antenne*)
val init_liste : int -> int -> antenne list;;

val split_string : string -> char list;;

(** [parse_input ()] lit deux lignes sur l'entrée standard du programme. 
   La première doit comporter un entier, la seconde une chaîne de caractères. 
   Retourne un couple composÃ© de l'entier de la première ligne et de la liste des caractères de la seconde.
   Lève l'exception [Failure "int_of_string"] si la première ligne ne représente pas un entier.
 *)
val parse_input : unit -> int * char list;;

(** [liste_sens_trigo ()] créer une liste comportant le nombre de 'P' puis 'E' donné en paramètre
@param dis un int
@return une liste*)
val liste_sens_trigo : int -> char list;;

(** [liste_sens_antitrigo ()] créer une liste comportant le nombre de 'N' puis 'E' donné en paramètre
@param dis un int
@return une liste*)
val liste_sens_antitrigo : int -> char list;;

(** [creation_liste()] creer la liste associé à la lecture d'un caractère
@param ancien int du caractère précédent b char caractère courant
@return liste *)
val creation_liste : int -> char -> char list;;

(** [lecture ()] créer la liste de mouvement des antennes en fonction d'une liste de char
@param input liste de char liste_antenne liste d'antenne
@return une liste de liste*)
val lecture : char list -> antenne list -> char list list;;
